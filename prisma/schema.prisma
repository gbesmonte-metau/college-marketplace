// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique
  password String
  location String? /// @encrypted
  formatted_address String? /// @encrypted
  icon String?
  bio String?
  createdPosts Post[] @relation("UserCreatedPosts")
  viewedPosts UserViewedPosts[] @relation("UserViewedPosts")
  likedPosts UserLikedPosts[] @relation("UserLikedPosts")
  savedPosts UserSavedPosts[] @relation("UserSavedPosts")
  purchases Purchase[] @relation("PurchaseBuyer")
  soldPosts Purchase[] @relation("PurchaseSeller")
}

model Post {
  id Int @id @default(autoincrement())
  price Float
  category Int
  name String
  time_created String
  time_sold String?
  location String /// @encrypted
  formatted_address String @default("No address available.") /// @encrypted
  description String?
  image_url String?
  image_tags String[]
  condition String?
  brand String?
  color String?
  author   User @relation("UserCreatedPosts", fields: [authorId], references: [id])
  authorId Int
  usersViewed UserViewedPosts[] @relation("UserViewedPosts")
  usersLiked UserLikedPosts[] @relation("UserLikedPosts")
  usersSaved UserSavedPosts[] @relation("UserSavedPosts")
  purchase Purchase? @relation("PurchasePost")
}

model UserViewedPosts {
  user User @relation("UserViewedPosts", fields: [userId], references: [id])
  userId Int
  post Post @relation("UserViewedPosts", fields: [postId], references: [id])
  postId Int
  viewedAt DateTime @default(now())
  @@id([userId, postId])
}

model UserLikedPosts {
  user User @relation("UserLikedPosts", fields: [userId], references: [id])
  userId Int
  post Post @relation("UserLikedPosts", fields: [postId], references: [id])
  postId Int
  likedAt DateTime @default(now())
  @@id([userId, postId])
}

model UserSavedPosts {
  user User @relation("UserSavedPosts", fields: [userId], references: [id])
  userId Int
  post Post @relation("UserSavedPosts", fields: [postId], references: [id])
  postId Int
  savedAt DateTime @default(now())
  @@id([userId, postId])
}

model Purchase {
  id Int @id @default(autoincrement())
  buyer User @relation("PurchaseBuyer", fields: [buyerId], references: [id])
  buyerId Int
  seller User @relation("PurchaseSeller", fields: [sellerId], references: [id])
  sellerId Int
  post Post @relation("PurchasePost", fields: [postId], references: [id])
  postId Int @unique
  purchasedAt DateTime @default(now())
  rating Int?
}
